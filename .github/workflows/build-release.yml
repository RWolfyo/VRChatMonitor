name: Build & Release (Windows x64)

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build Windows x64 EXE and create release
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build exe (pkg)
        run: |
          echo "Building vrc-monitor for Windows x64..."
          npm run build

      - name: Package build into ZIP
        shell: pwsh
        run: |
          Write-Host "Preparing release directory..."
          $releaseDir = "release-artifact"
          New-Item -ItemType Directory -Path $releaseDir -Force | Out-Null

          Write-Host "Copying exe and common files..."
          Copy-Item -Path "dist\vrc-monitor.exe" -Destination $releaseDir -Force
          Copy-Item -Path "LICENSE" -Destination $releaseDir -Force -ErrorAction SilentlyContinue
          Copy-Item -Path "README.md" -Destination $releaseDir -Force -ErrorAction SilentlyContinue
          Copy-Item -Path "config.json" -Destination $releaseDir -Force -ErrorAction SilentlyContinue
          Copy-Item -Path "blockedGroups.jsonc" -Destination $releaseDir -Force -ErrorAction SilentlyContinue
          
          Write-Host "Including vendor executables (project/vendor and node-notifier vendor, if present)..."
          # Copy project's vendor folder (e.g. vendor\ffplay.exe) into the release artifact
          if (Test-Path "vendor") {
            New-Item -ItemType Directory -Path "$releaseDir\vendor" -Force | Out-Null
            Copy-Item -Path "vendor\*" -Destination "$releaseDir\vendor" -Recurse -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "project vendor directory not found; skipping"
          }

          # Also include node-notifier's vendor files if present
          if (Test-Path "node_modules\node-notifier\vendor") {
            New-Item -ItemType Directory -Path "$releaseDir\vendor" -Force | Out-Null
            Copy-Item -Path "node_modules\node-notifier\vendor\*" -Destination "$releaseDir\vendor" -Recurse -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "node-notifier vendor directory not found; skipping"
          }

          Write-Host "Creating ZIP archive..."
          $zipPath = "dist\vrc-monitor-windows-x64.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$releaseDir\*" -DestinationPath $zipPath -Force
          Write-Host "Zip created at $zipPath"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: build-${{ github.run_number }}-${{ github.sha }}
          release_name: vrc-monitor build #${{ github.run_number }} - ${{ github.sha }}
          body: Automated build for commit ${{ github.sha }} (run ${{ github.run_number }})
          draft: false
          prerelease: false

      - name: Upload release asset (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/vrc-monitor-windows-x64.zip
          asset_name: vrc-monitor-windows-x64.zip
          asset_content_type: application/zip
